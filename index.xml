<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>N3xtChen 的博客</title><link>https://n3xtchen.github.io/n3xtchen/</link><description>Recent content on N3xtChen 的博客</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>© 2023 n3xtchen</copyright><lastBuildDate>Tue, 24 Oct 2023 15:52:48 +0800</lastBuildDate><atom:link href="https://n3xtchen.github.io/n3xtchen/index.xml" rel="self" type="application/rss+xml"/><item><title>终于我的 Gihub Page 从 Jekyll 迁移到 Hugo</title><link>https://n3xtchen.github.io/n3xtchen/2023/10/18/jekyll-migrate-to-hugo/</link><pubDate>Wed, 18 Oct 2023 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2023/10/18/jekyll-migrate-to-hugo/</guid><description>从 2013 年开始，我已经使用 Jekyll 十个年头了，当时对 Ruby 极其狂热，也是我选择他的原因，中间也换过一次主题，其实没什么不好，迁移的原因是因为 hugo-obsidian 用起来挺不错（虽然 Jekyll 也有类似，但是感觉不够丝滑），我可以使用无缝使用 Obsidian 编写我的博客。</description></item><item><title>Homebrew 空间释放</title><link>https://n3xtchen.github.io/n3xtchen/2023/08/04/homebrew-free-disk/</link><pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2023/08/04/homebrew-free-disk/</guid><description>为了玩大模型，努力释放 Macbook 的空间，蚊子腿也是肉。现在看下我们 Homebrew 的目录结构：</description></item><item><title>提高 Scala 代码的可读性（For Spark）</title><link>https://n3xtchen.github.io/n3xtchen/2020/12/04/readable-scala-code-in-spark/</link><pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2020/12/04/readable-scala-code-in-spark/</guid><description>Jupyter 和 Apache Zeppelin 是一个数据处理体验比较好的地方。不幸的是，notebooks 的特点决定了他不擅长组织代码，包括去耦合（decomposition）和可读性。我们要将代码复制到 IDE 上，然后编译成 JAR，但是效果不是很好。接下来，我们将会讲如何在 IDE 中编写可读性更高的代码。</description></item><item><title>Kubernetes/MicroK8s 安装(For ContainerD and OsX)</title><link>https://n3xtchen.github.io/n3xtchen/2020/09/29/microk8s-starter/</link><pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2020/09/29/microk8s-starter/</guid><description>K8S + ContainerD = 大坑，谁折腾谁知道（公有云的好处就体现出来）！各种链接不上，各种下载慢，谁经历谁崩溃！ 怀抱的极客精神（其实是犯贱），明知山有虎（坑），偏向虎山行（坑上走）。</description></item><item><title>Spark 流计算状态管理进化史</title><link>https://n3xtchen.github.io/n3xtchen/2020/09/05/spark-sss-state-management/</link><pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2020/09/05/spark-sss-state-management/</guid><description>状态（State）在流计算是一个宽泛概念的词汇；继续之前，我们先明确下个定义。状态（State）字面意思就是“中间信息（Intermediate Information）”。</description></item><item><title>让 Rust 嵌入你的生活: 你的植物渴了吗？(Arduino)</title><link>https://n3xtchen.github.io/n3xtchen/2020/09/04/rust-arduino---soil/</link><pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2020/09/04/rust-arduino---soil/</guid><description>土壤湿度监测代码如下：</description></item><item><title>如何在 Arduino Uno 中运行 Rust：让你的 LED 灯闪起来</title><link>https://n3xtchen.github.io/n3xtchen/2020/08/22/rust-arduino----our-first-blink/</link><pubDate>Sat, 22 Aug 2020 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2020/08/22/rust-arduino----our-first-blink/</guid><description>已经有一段时间没碰板子了，怎么想写一篇关于 Arduino 的文章呢？这要追溯到一个月前， rust-avr 分支合并到 upstream 了，可以通过 nightly 版来直接使用它来开发 Arduino 程序；一直以来都是用 C 来写，Rust 的诱惑力，你懂得！你现在只要完成以下两步就可以为 AVR 微控面板编译 Rust 程序了：</description></item><item><title>面向非浏览器领域的 WebAssembly</title><link>https://n3xtchen.github.io/n3xtchen/2020/08/17/webassembly-without-the-browser-part1/</link><pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2020/08/17/webassembly-without-the-browser-part1/</guid><description>你现在找到的大部分 WebAssembly 教程和例子都是聚焦在浏览器之中，比如如何加速网页或者网页应用各种各样的功能。无论如何，WebAssembly 真正强大的领域但是被提及的很少：浏览器之外的领域；也是我们接下来系列关注的点。</description></item><item><title>更 Pythonic: 从 Conda 开始</title><link>https://n3xtchen.github.io/n3xtchen/2019/02/14/py-conda/</link><pubDate>Thu, 14 Feb 2019 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2019/02/14/py-conda/</guid><description>先忽悠上贼船 # Conda 是一个开源包管理系统和环境管理系统，有如下当家特点：</description></item><item><title>极简教程: 使用 matplotlib 绘制 GIF 动图</title><link>https://n3xtchen.github.io/n3xtchen/2019/02/12/matplotlib-gif/</link><pubDate>Tue, 12 Feb 2019 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2019/02/12/matplotlib-gif/</guid><description>开门见山，直接上例子：</description></item><item><title>Reading: 2018</title><link>https://n3xtchen.github.io/n3xtchen/2019/01/01/2018-readig/</link><pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2019/01/01/2018-readig/</guid><description>完成度：20/26</description></item><item><title>PostgreSQL: 匿名化（Anonymizer）工具</title><link>https://n3xtchen.github.io/n3xtchen/2018/12/29/pgsql-anonymizer/</link><pubDate>Sat, 29 Dec 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/12/29/pgsql-anonymizer/</guid><description>PostgreSQL Anonymizer: 在 PostgreSQL 中隐藏或替换个人身份信息（PII）或者商业敏感信息数据。[项目地址：https://gitlab.</description></item><item><title>OsX: 完全卸载攻略（pkg）</title><link>https://n3xtchen.github.io/n3xtchen/2018/12/11/os-x-pkgutil/</link><pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/12/11/os-x-pkgutil/</guid><description>在 Os X 清理程序过程，遇到 .</description></item><item><title>入门: 神经网络（Neural Network）及 Python 实现</title><link>https://n3xtchen.github.io/n3xtchen/2018/12/06/neural-network/</link><pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/12/06/neural-network/</guid><description>为了更好的理解深度学习，我决定从零开始构建一个神经网络（Neural Network）。</description></item><item><title>E: Repository 'http://url stable Release' changed its 'Origin' value from 'XX' to 'YY'</title><link>https://n3xtchen.github.io/n3xtchen/2018/11/12/apt-e-repository-change-its-origin-vale/</link><pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/11/12/apt-e-repository-change-its-origin-vale/</guid><description>当你在 Ubuntu 使用 apt-get update 的时候，我获取如下信息：</description></item><item><title>Go module 解决本地库依赖问题(更新中。。。)</title><link>https://n3xtchen.github.io/n3xtchen/2018/10/30/go-mod-local-pacakge/</link><pubDate>Tue, 30 Oct 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/10/30/go-mod-local-pacakge/</guid><description>作为伪用户，Go 可谓是当代最反现代的语言（是一种退化），就是有个好爹，吐槽几点：</description></item><item><title>三个工程小团队</title><link>https://n3xtchen.github.io/n3xtchen/2018/10/24/moving-to-three-person-engineering-teams/</link><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/10/24/moving-to-three-person-engineering-teams/</guid><description>译自： Moving to three-person engineering teams</description></item><item><title>量化你自己: （大部分）免费的工具和策略来追踪你生活中的（几乎）每一个角落</title><link>https://n3xtchen.github.io/n3xtchen/2018/10/09/quantify-yourself/</link><pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/10/09/quantify-yourself/</guid><description>是人都想要变得更好，做的更出色，不仅仅是在工作，还有在生活。</description></item><item><title>数据的一生: OSEMN 数据科学流水线方法</title><link>https://n3xtchen.github.io/n3xtchen/2018/08/17/data-science-is-osemn/</link><pubDate>Fri, 17 Aug 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/08/17/data-science-is-osemn/</guid><description>很久以前，有一个男孩，他名字叫数据。穷其一生，他一直在尝试理解生命的意义。我的价值是什么？我能对这个世界找成什么影响？我来自哪里？这些问题一直萦绕在他的脑海中；幸运的是，纯粹运气，数据最后找到了一个方法，并通过了一次伟大的变革。</description></item><item><title>管理自己的长期和短期目标：使用日志（Journals）</title><link>https://n3xtchen.github.io/n3xtchen/2018/03/18/journaling-to-align-lt-goals-and-st-goals/</link><pubDate>Sun, 18 Mar 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/03/18/journaling-to-align-lt-goals-and-st-goals/</guid><description>我是用一个称之为 生产日志（productivity journals） 来管理我的长期目标。</description></item><item><title>Spark ML: 创建你自己的算法管道</title><link>https://n3xtchen.github.io/n3xtchen/2018/03/06/spark-ml-customer-modeltransformer-type/</link><pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/03/06/spark-ml-customer-modeltransformer-type/</guid><description>Spark ML Pipeline 有各种各样的算法同时，你可能发现自己也需要不离开 Pipeline 模型也可以使用额外的函数；在 Spark MLlib 中，就不是个事 —— 你可以使用 RDD 转换器实现自己的算法。至于 Spark ML Pipeline ，同样的方法也可用，但是我们失去了 Pipeline 优雅的整合方式，包括自动运行元算法（meta-algorithms，对其他算法进行组合的方式），例如参数交叉验证（cross-validation parameter search）。在这篇文章中，将使用 word count 示例作为入门课程，来演示 Spark ML Pipeline Model 类编写（做算法的哥么永远无法摆脱 word count 示例，^_^）。</description></item><item><title>Scala Spark DataFrame: DataFrame.select 传入可变参数的方法</title><link>https://n3xtchen.github.io/n3xtchen/2018/01/22/scala-spark-dataframe-dataframeselect-multiple-columns-given-a-sequence-of-column-names/</link><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/01/22/scala-spark-dataframe-dataframeselect-multiple-columns-given-a-sequence-of-column-names/</guid><description>今天遇到个简单的错误，在这里与大家分享下。</description></item><item><title>理解特征工程 - 连续型数值特征</title><link>https://n3xtchen.github.io/n3xtchen/2018/01/09/understanding-feature-engineering-continuous/</link><pubDate>Tue, 09 Jan 2018 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2018/01/09/understanding-feature-engineering-continuous/</guid><description>介绍 # Money makes the world go round（金钱驱动整个世界运转），无论你同不同意，有些时候你无法忽视它。在数字革命的时代，Data makes the world go round（数据驱动整个世界运转） 这句话更准确。事实上，无论数据的规模大小，数据已经成为企业、公司和组织的首要（first class）资产。一个智能系统，无论其复杂性，都需要强大的数据支撑。智能系统的核心，我拥有一个多个基于机器学习、深度学习或者统计方法的算法来消费数据，收集知识，并在一段时间内提供智能洞见（Insight）。算法本身很幼稚，不能适用于原始数据。因此，从原始数据中提取有意义的特征是非常重要的，特闷可以被算法理解并消费。</description></item><item><title>这里有你想知道的区块链（Blockchains）- 第一部分</title><link>https://n3xtchen.github.io/n3xtchen/2017/10/22/knowing-blockchain/</link><pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/10/22/knowing-blockchain/</guid><description>Ah，区块链。</description></item><item><title>Spark - 机器学习入门</title><link>https://n3xtchen.github.io/n3xtchen/2017/10/21/use-spark-ml/</link><pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/10/21/use-spark-ml/</guid><description>这一两年非常火的主题就是机器学习 - 与计算统计密切相关的跨学科领域，让我们的计算机学会不被明确编程下进行自动化工作。</description></item><item><title>Window 下 Cucumber 新人手册：使用 Ruby 和 Capybara 进行自动化测试</title><link>https://n3xtchen.github.io/n3xtchen/2017/10/09/ruby-cucumber-and-capybara-on-window/</link><pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/10/09/ruby-cucumber-and-capybara-on-window/</guid><description>前言 # 我一般使用 Selenium Webdriver 进行 WEB 自动化测试。她是自动化测试领域知名的框架，拥有成熟的社区；当你遇到困难的的时候，你很容易找到解决方法。另一方面，我的一些朋友是 Ruby For Test 的大粉丝。我也同时也参加了一些 Ruby 自动化测试沙龙，了解 Ruby 的一些特性和能力。作为我的观点，Ruby 拥有简洁的语法，并且易于上手；你可以使用 Capybara 驱动 WEB 应用，RestClient 进行接口测试和 SitePrism 进行 POM (Page Object Model) UI 测试；掌握了这些库，你就可以轻轻松松开始自动化测试了。</description></item><item><title>跳过 GREP，使用 AWK</title><link>https://n3xtchen.github.io/n3xtchen/2017/07/14/skip-grep-use-awk/</link><pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/07/14/skip-grep-use-awk/</guid><description>多年来，我发现肯多人使用下面的模型进行过滤映射（filter-map）:</description></item><item><title>19 个很有用的 ElasticSearch 查询语句</title><link>https://n3xtchen.github.io/n3xtchen/2017/07/05/elasticsearch---23-useful-query-example/</link><pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/07/05/elasticsearch---23-useful-query-example/</guid><description>为了演示不同类型的 ElasticSearch 的查询，我们将使用书文档信息的集合（有以下字段：title（标题）, authors（作者）, summary（摘要）, publish_date（发布日期）和 num_reviews（浏览数））。</description></item><item><title>vim 8.0 - ubuntu 17.04 踩坑记录</title><link>https://n3xtchen.github.io/n3xtchen/2017/06/07/vim-80-ubuntu-1704/</link><pubDate>Wed, 07 Jun 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/06/07/vim-80-ubuntu-1704/</guid><description/></item><item><title>Git 修改远端仓库地址</title><link>https://n3xtchen.github.io/n3xtchen/2017/06/05/git-update-remote/</link><pubDate>Mon, 05 Jun 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/06/05/git-update-remote/</guid><description>如果你想从 github/bucket 迁移到私有的 gitlab，或者反过来 你的 git 地址域名变更了 你的项目名称变更了 并且你的代码库已经比较巨大，不想重新全量 pull 代码，那这个教程就适合你。</description></item><item><title>数据挖掘-探讨工程项目结构</title><link>https://n3xtchen.github.io/n3xtchen/2017/05/17/data-science-project-rule/</link><pubDate>Wed, 17 May 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/05/17/data-science-project-rule/</guid><description>目录结构 # ├── LICENSE ├── Makefile &amp;lt;- 流程工具 ├── README.</description></item><item><title>OS X 下安装未验证第三方开发的APP 方法</title><link>https://n3xtchen.github.io/n3xtchen/2017/04/24/os-x-app-is-damaged-and-cant-be-opened/</link><pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/04/24/os-x-app-is-damaged-and-cant-be-opened/</guid><description>我尝试打开一个不是从 App Store 下载的应用，系统会报错：</description></item><item><title>Docker 指令之 ENTRYPOINT 和 CMD</title><link>https://n3xtchen.github.io/n3xtchen/2017/04/15/docker-entrypoint--cmd/</link><pubDate>Sat, 15 Apr 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/04/15/docker-entrypoint--cmd/</guid><description>CMD 和 ENTRYPOINT 指令在运行容器时决定哪些命令将被执行。下面是它们几条共同合作的规则：</description></item><item><title>Scala ERROR: No ClassTag available for A</title><link>https://n3xtchen.github.io/n3xtchen/2017/04/05/scala-typetag--classtag/</link><pubDate>Wed, 05 Apr 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/04/05/scala-typetag--classtag/</guid><description>今天写代码，遇到了莫名其妙的错误：</description></item><item><title>让 Postgres 和 Kafka 一起玩耍</title><link>https://n3xtchen.github.io/n3xtchen/2017/03/31/playing-with-postgres-and-kafka/</link><pubDate>Fri, 31 Mar 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/03/31/playing-with-postgres-and-kafka/</guid><description>Apache Kafka 和 Postgres: 处理事务和报表能力 # Apache Kafka 是目前主流的分布式流处理平台，用于数据处理和信息一致保证。她允许你集中数据流，完成多种目的。我突然对 Mozilla 的数据管道 实现感兴趣，尤其是其中展示了 Kafka 作为流的入口。</description></item><item><title>你不知道的10个SQL杀手级特性</title><link>https://n3xtchen.github.io/n3xtchen/2017/02/13/10-sql-tricks-that-you-didnt-think-were-possible/</link><pubDate>Mon, 13 Feb 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/02/13/10-sql-tricks-that-you-didnt-think-were-possible/</guid><description>TLDR;</description></item><item><title>Spark 实现简单移动平均值（SMA） - 窗口函数（Window Function）</title><link>https://n3xtchen.github.io/n3xtchen/2017/01/24/spark200---window-function/</link><pubDate>Tue, 24 Jan 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/01/24/spark200---window-function/</guid><description>什么是简单移动平均值 # 简单移动平均（英语：Simple Moving Average，SMA）是某变数之前n个数值的未作加权算术平均。例如，收市价的10日简单移动平均指之前10日收市价的平均数。</description></item><item><title>踩坑大回放：webpack2 + babel + react + eslint</title><link>https://n3xtchen.github.io/n3xtchen/2017/01/23/webpack2-babel-react-eslint---error/</link><pubDate>Mon, 23 Jan 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/01/23/webpack2-babel-react-eslint---error/</guid><description>一时兴起，开始 webpack2，配置成功，却是比前一个版本人性化了不少；接着添加 react + redux，结果遇到了一堆坑（一部分是之前遇到），于是有了这篇博客来记录此次踩坑过程。</description></item><item><title>Vim - NERDTree 文件(夹)操作</title><link>https://n3xtchen.github.io/n3xtchen/2017/01/22/vim---nerdtree-operate-file/</link><pubDate>Sun, 22 Jan 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/01/22/vim---nerdtree-operate-file/</guid><description>首先，在 vim 中键入如下命令打开 NERDTree：</description></item><item><title>MacOs—修复 iTerm2 和 Tmux/Vim 变慢的问题</title><link>https://n3xtchen.github.io/n3xtchen/2017/01/18/osx---iterm2vim-slow/</link><pubDate>Wed, 18 Jan 2017 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2017/01/18/osx---iterm2vim-slow/</guid><description>一旦我打开多个 Tmux 窗口，我的 Vim 就变得超级慢。</description></item><item><title>GGplot2 - 参数化与 aes_string</title><link>https://n3xtchen.github.io/n3xtchen/2016/12/12/r---ggplot-aes_string/</link><pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/12/12/r---ggplot-aes_string/</guid><description>我们先来看一段代码：</description></item><item><title>PostgreSQL 的 For Each 语句 - Lateral 联表</title><link>https://n3xtchen.github.io/n3xtchen/2016/12/07/pgsql-lateral/</link><pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/12/07/pgsql-lateral/</guid><description>LATERAL 的用途，可以是 SELECT 中的结果作为条件，并把查询的结果，直接引用到 SELECT 子句中，先来看一个语句:</description></item><item><title>Java 多版本共存工具 - Jenv</title><link>https://n3xtchen.github.io/n3xtchen/2016/12/06/java---jenv/</link><pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/12/06/java---jenv/</guid><description>你肯定遇到过，开发新的应用的时候需要使用新版本，但是你想要为你原先的 Java 项目 保留旧的 Java 版本。似乎我需要一个类似 rbEnv 这样的工具（Ruby 版本切换工具）…… 祭出 Java 版的。</description></item><item><title>Git - 拉取（Git Clone）代码太慢了</title><link>https://n3xtchen.github.io/n3xtchen/2016/12/05/git---clone-so-slow/</link><pubDate>Mon, 05 Dec 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/12/05/git---clone-so-slow/</guid><description>有时候，我需要从 Github 上克隆一个超级大的代码项目，我发现获取的数据超级慢（Kb/s）。</description></item><item><title>Node - 查看自己安装的包</title><link>https://n3xtchen.github.io/n3xtchen/2016/12/04/node---list-package-without-dep/</link><pubDate>Sun, 04 Dec 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/12/04/node---list-package-without-dep/</guid><description>如果以为只是简简单单的 npm list -g ，那你就 too young too simple。</description></item><item><title>Java 版本不兼容 - Unsupported major.minor version 52.0</title><link>https://n3xtchen.github.io/n3xtchen/2016/12/03/java---unsupported-majorminor-version-520/</link><pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/12/03/java---unsupported-majorminor-version-520/</guid><description>如果在编译代码的时候出现：</description></item><item><title>Jupyter: Os X 下修改默认打开的浏览器</title><link>https://n3xtchen.github.io/n3xtchen/2016/12/03/jupyter---default-browser/</link><pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/12/03/jupyter---default-browser/</guid><description>由于 Os X 默认浏览器 Safari 下，Jupyter 的样式会有异常，只好切换到 Chrome 上了。</description></item><item><title>Scale - [warn] Class java.time.Duration not found</title><link>https://n3xtchen.github.io/n3xtchen/2016/12/03/scale---warn-class-javatimeduration-not-found/</link><pubDate>Sat, 03 Dec 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/12/03/scale---warn-class-javatimeduration-not-found/</guid><description>如果你遇上如下错误：</description></item><item><title>SSH - 无密码登录</title><link>https://n3xtchen.github.io/n3xtchen/2016/10/22/ssh---passwordless-login/</link><pubDate>Sat, 22 Oct 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/10/22/ssh---passwordless-login/</guid><description>第一步：生成 Key # 在你的机子上，使用 ssh-keygen 生成 RSA 私钥（你已经做了，可以跳过这一步）</description></item><item><title>Homebrew: 解决无法更新问题(2016-08-10)</title><link>https://n3xtchen.github.io/n3xtchen/2016/09/17/brew---bug-on-update-2016-08-10/</link><pubDate>Sat, 17 Sep 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/09/17/brew---bug-on-update-2016-08-10/</guid><description>前一段时间，发现 homebrew 怎么都不更新了。每天都有很多的更新，正和小伙伴们讨论是不是这个项目快要去了，Σ（ﾟдﾟlll）</description></item><item><title>hg 简易教程</title><link>https://n3xtchen.github.io/n3xtchen/2016/09/06/hg-tutorial/</link><pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/09/06/hg-tutorial/</guid><description>检出代码 # $ hg checkout http://url 更新代码 # $ hg pull $ hg update 回滚代码 # 代码合并 # 创建分支 # 合并分支 # 添加和修改远端服务器 # .</description></item><item><title>JDBC 的驱动类型</title><link>https://n3xtchen.github.io/n3xtchen/2016/09/04/jdbc-type/</link><pubDate>Sun, 04 Sep 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/09/04/jdbc-type/</guid><description>闲的无事，满试着总结归纳下：</description></item><item><title>如何查找和杀掉 PostgreSQL 中长时间运行的查询</title><link>https://n3xtchen.github.io/n3xtchen/2016/08/31/kill-postgresql/</link><pubDate>Wed, 31 Aug 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/08/31/kill-postgresql/</guid><description>长时间运行的查询会影响整体数据库的性能，它们可能停留在一些后台进程中。尤其当遇上表锁的时候，就更蛋疼了，于是有了下面的文章。</description></item><item><title>使用 Jquery 发送 Json 数据的正确姿势</title><link>https://n3xtchen.github.io/n3xtchen/2016/08/30/jquery-post-json/</link><pubDate>Tue, 30 Aug 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/08/30/jquery-post-json/</guid><description>让我们先从错误的姿势开始：</description></item><item><title>py.test - 常见的命令</title><link>https://n3xtchen.github.io/n3xtchen/2016/07/17/pytest---commandline/</link><pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/07/17/pytest---commandline/</guid><description>发现每次使用 py.</description></item><item><title>Scala - 使用 typesafe.config 管理你的配置文件</title><link>https://n3xtchen.github.io/n3xtchen/2016/07/14/scala---typesafe-config/</link><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/07/14/scala---typesafe-config/</guid><description>为了统一管理配置项，我在真是操碎了心啊。现在我分享下这两天的研究成果。</description></item><item><title>Scala - 只谈模式匹配</title><link>https://n3xtchen.github.io/n3xtchen/2016/07/13/scala---pattern-match/</link><pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/07/13/scala---pattern-match/</guid><description>1: val bools = Seq(true, false) 2: for (bool in bools) { 3: bool match { 4: case true =&amp;gt; println(&amp;quot;真的&amp;quot;) 5: case false =&amp;gt; println(&amp;quot;假的&amp;quot;) 6: } 7: } 这个就是我们所说的模式匹配；看起来很像 C 风格，但是不一样，尤其要记住：=&amp;gt;，我经常把它写成 :。</description></item><item><title>Scalatra: 安装和端口配置</title><link>https://n3xtchen.github.io/n3xtchen/2016/07/13/scalatra---installationconfig/</link><pubDate>Wed, 13 Jul 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/07/13/scalatra---installationconfig/</guid><description>发现对于新手来说，配置都挺蛋疼，所以还是写一篇博客备忘下。</description></item><item><title>Scala 新手眼中的十种有趣用法</title><link>https://n3xtchen.github.io/n3xtchen/2016/06/15/scala---top-10-for-new/</link><pubDate>Wed, 15 Jun 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/06/15/scala---top-10-for-new/</guid><description>TL;DR</description></item><item><title>Swift World - 基础入门</title><link>https://n3xtchen.github.io/n3xtchen/2016/05/27/swift-world/</link><pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/05/27/swift-world/</guid><description>作为 Swift 初学者（高手绕行），暂时让 iOS 和 Mac Os（洗完这篇文章的时候，Os X 已经更名了） 编程见鬼去；所以，一开始就不使用 XCode 作为演示工具，直接使用 Swift 的 REPL 来进行演示，让我们一起 focus 语言本身。</description></item><item><title>postgreql performance</title><link>https://n3xtchen.github.io/n3xtchen/2016/05/03/postgreql---performance/</link><pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/05/03/postgreql---performance/</guid><description/></item><item><title>PostgreSQL - 使用 PGXN 安装 oracle-fdw</title><link>https://n3xtchen.github.io/n3xtchen/2016/05/02/postgresql---use-pgxn-install-oracle-fdw/</link><pubDate>Mon, 02 May 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/05/02/postgresql---use-pgxn-install-oracle-fdw/</guid><description>安装 oracle_fdw # 设置环境变量</description></item><item><title>PostgreSQL - 9.5 会成为你的下一个 JSON 数据库?</title><link>https://n3xtchen.github.io/n3xtchen/2016/04/24/postgresql---json/</link><pubDate>Sun, 24 Apr 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/04/24/postgresql---json/</guid><description>TL;DR: 是的，但这不是一个好的问题。</description></item><item><title>React&amp; D3.js: 整合 D3.js 可视化组件到 React 应用中</title><link>https://n3xtchen.github.io/n3xtchen/2016/03/08/reactd3/</link><pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/03/08/reactd3/</guid><description>使用一个小小的例子来演示如何把 D3.</description></item><item><title>Nginx —— 理解HTTP 代理，负载均衡，缓冲（Buffering）和缓存（Caching）</title><link>https://n3xtchen.github.io/n3xtchen/2016/02/19/nginx-port-forwording/</link><pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/02/19/nginx-port-forwording/</guid><description>介绍 # 这里，我们将介绍 Nginx 的 Http 代理功能（请求（request） 通过 Nignx 传递到后端服务器，进行后续处理）。Nginx 经常设置为 反向代理（Reverse Proxy） 帮助 横向扩展（scale out：通过增加独立服务器来增加运算能力） 基础架构（infrastructure） 来提升负载能力或者传递请求给下一级代理服务器。</description></item><item><title>Swift 学习笔记4 —— 文件结构，作用域和生命周期</title><link>https://n3xtchen.github.io/n3xtchen/2016/02/14/swift---tut4/</link><pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/02/14/swift---tut4/</guid><description>文件结构 # 一个 Swift 程序有一个或多个文件组成。在 Swift 中，文件是一个有意义的个体。能存在于文件顶级目录有如下组件：</description></item><item><title>Swift 学习笔记3 —— 变量和函数</title><link>https://n3xtchen.github.io/n3xtchen/2016/02/12/swift---tut3/</link><pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/02/12/swift---tut3/</guid><description>变量 # 变量是一个对象的名称。技术角度，它是一个对象的索引。非技术角度，你可以把它当作装对象的一个鞋盒。一个对象可能会被改变，或者被放到另一个对象的鞋盒中，但是名称代表他们整体。</description></item><item><title>Swift 学习笔记2 —— 一切都是对象</title><link>https://n3xtchen.github.io/n3xtchen/2016/02/11/swift---tut2/</link><pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/02/11/swift---tut2/</guid><description>一切都是对象 # 在 Swift，“一切都是对象。” 这是个现代面向对象语言的最浮夸吹嘘点。</description></item><item><title>Swift 学习笔记1</title><link>https://n3xtchen.github.io/n3xtchen/2016/02/08/swift---tut/</link><pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/02/08/swift---tut/</guid><description>语句 # 我们把一个完整的 Swift 命令称作语句（Statement）。一个 Swift 文本文件包含多行，其中换行（Line Break）是有实际意义的。标准的程序布局就是一个语句一行：</description></item><item><title>ReactJS：使用 webpack 部署</title><link>https://n3xtchen.github.io/n3xtchen/2016/01/24/react-with-webpack/</link><pubDate>Sun, 24 Jan 2016 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2016/01/24/react-with-webpack/</guid><description>最近我开始使用 React 和 webpack 进行开发，在效率方面得到了很大的提升。我发现这样的组合让前端开发更加有趣，你们也应该试试。</description></item><item><title>探索 Yii2: 数据库迁移（Database Migration）</title><link>https://n3xtchen.github.io/n3xtchen/2015/12/24/into-yii-db-migration/</link><pubDate>Thu, 24 Dec 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/12/24/into-yii-db-migration/</guid><description>前提 # php &amp;gt;= 5.</description></item><item><title>使用 Spring Boot: 构建 Restful 服务</title><link>https://n3xtchen.github.io/n3xtchen/2015/10/12/using-spring-boot-to-build-a-restful-web-server/</link><pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/10/12/using-spring-boot-to-build-a-restful-web-server/</guid><description>这个教程我们将使用 Spring 创建一个 “Hello World” 的 Restful 服务。</description></item><item><title>使用 Gradle 创建 Java 项目</title><link>https://n3xtchen.github.io/n3xtchen/2015/10/10/build-java-project-with-gradle/</link><pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/10/10/build-java-project-with-gradle/</guid><description>这个指南将引导你使用 Gradle 创建一个简单的 Java 项目。</description></item><item><title>Nginx-端口转发(反向代理)</title><link>https://n3xtchen.github.io/n3xtchen/2015/10/01/nginx-port-forwording/</link><pubDate>Thu, 01 Oct 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/10/01/nginx-port-forwording/</guid><description>译自： Understanding Nginx HTTP Proxying, Load Balancing, Buffering, and Caching</description></item><item><title>PostgreSQL - PostGrest 简介</title><link>https://n3xtchen.github.io/n3xtchen/2015/08/13/postgresql---postgrest/</link><pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/08/13/postgresql---postgrest/</guid><description>译自 PostGrest Introduction</description></item><item><title>Postgresql - ROW_NUM(), RANK() 和 DENSE_RANK() 的区别</title><link>https://n3xtchen.github.io/n3xtchen/2015/08/13/postgresql---row_num-rank-dense_rank/</link><pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/08/13/postgresql---row_num-rank-dense_rank/</guid><description>pigdb=# WITH T(CateID, ID) AS (SELECT 1,1 UNION ALL SELECT 1,1 UNION ALL SELECT 1,1 UNION ALL SELECT 1,2) SELECT *, RANK() OVER(PARTITION BY CateID ORDER BY ID) , ROW_NUMBER() OVER(PARTITION BY CateID ORDER BY ID), DENSE_RANK() OVER(PARTITION BY CateID ORDER BY ID) FROM T; cateid | id | rank | row_number | dense_rank --------+----+------+------------+------------ 1 | 1 | 1 | 1 | 1 1 | 1 | 1 | 2 | 1 1 | 1 | 1 | 3 | 1 1 | 2 | 4 | 4 | 2 (4 rows)</description></item><item><title>PostgreSQL vs MySQL：取分组数据的前N条纪录</title><link>https://n3xtchen.github.io/n3xtchen/2015/08/13/pgsql-vs-mysql---get-nth-value-per-group/</link><pubDate>Thu, 13 Aug 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/08/13/pgsql-vs-mysql---get-nth-value-per-group/</guid><description>测试数据： # +------+------+------------------+ | cate | item | note | +------+------+------------------+ | a | 2 | a的第二个值 | | a | 1 | a的第一个值 | | a | 3 | a的第三个值 | | b | 1 | b的第一个值 | | b | 3 | b的第三个值 | | b | 2 | b的第二个值 | | b | 4 | b的第四个值 | | b | 5 | b的第五个值 | +------+------+------------------+ 建表和准备数据 # 都是通用类型，所以 pgsql 和 mysql 的建表和插表的语句都一样：</description></item><item><title>PostgreSQL - 使用 PGXN 安装 Mysql-fdw</title><link>https://n3xtchen.github.io/n3xtchen/2015/06/17/postgresql--use-pgxn-install-mysql-fdw/</link><pubDate>Wed, 17 Jun 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/06/17/postgresql--use-pgxn-install-mysql-fdw/</guid><description>环境要求 # postgresql 9.</description></item><item><title>简化：将代码移到数据库函数中</title><link>https://n3xtchen.github.io/n3xtchen/2015/06/16/pgsql-move-code-into-database-functions/</link><pubDate>Tue, 16 Jun 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/06/16/pgsql-move-code-into-database-functions/</guid><description>原文引用： Simplify: move code into database functions</description></item><item><title>PHP：浅谈函数式编程（一）</title><link>https://n3xtchen.github.io/n3xtchen/2015/04/26/php---functional-programming/</link><pubDate>Sun, 26 Apr 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/04/26/php---functional-programming/</guid><description>思考一下这个程序的输出结果</description></item><item><title>Python - 下划线（_）</title><link>https://n3xtchen.github.io/n3xtchen/2015/04/22/python---underscore/</link><pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/04/22/python---underscore/</guid><description>这张帖子讨论 Python 的下划线的使用，讲解下它的大部分使用场景。</description></item><item><title>Python - 偏函数应用让你的代码看起来更简洁</title><link>https://n3xtchen.github.io/n3xtchen/2015/04/20/python-clean-code-through-partial-function-application/</link><pubDate>Mon, 20 Apr 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/04/20/python-clean-code-through-partial-function-application/</guid><description>偏函数应用（Partial Function Application）听起来名字就很吸引人；它的作用是在函数调用前，预先固定参数的方法。它的机制有点粗糙，学术的解释有点古板，但是它很有用。如果你的函数需要 x 和 y 两个参数，实现把 x 参数固定了，后续调用只需要传入 y 即可，来看一个例子：</description></item><item><title>Cucumber - 入门</title><link>https://n3xtchen.github.io/n3xtchen/2015/04/17/cucumber---intro/</link><pubDate>Fri, 17 Apr 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/04/17/cucumber---intro/</guid><description>经过一段时间的学习，对 Cucumber 有了初步的了解，它所包含的理念深深的打动了我。作为 TDD 的拥护者，已经长期被需求折磨的开发来讲，希望借助 Cucumber 的推广：</description></item><item><title>PostgreSQL 触发器（Trigger）- 创建安全的自增主键</title><link>https://n3xtchen.github.io/n3xtchen/2015/04/14/postgresql---trigger/</link><pubDate>Tue, 14 Apr 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/04/14/postgresql---trigger/</guid><description>通常情况，常规的 SQL 事件（Event） 应该在普通行为的之前或之后被触发。这个行为可以是对插入的值的类型检查，可以是在插入前的格式化，或者是变更和删除数据之后对相关的表的数据修改。传统的处理方式是通过连接数据库的应用的编码层来做，而不是数据库软件本身。</description></item><item><title>PostgreSQL - 序列（Sequence）</title><link>https://n3xtchen.github.io/n3xtchen/2015/04/10/postgresql---sequence/</link><pubDate>Fri, 10 Apr 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/04/10/postgresql---sequence/</guid><description>PostgreSQL 中的序列是一个数据库对象，本质上是一个自增器。因此，序列在其他同类型数据库软件中以 autoincrment 值的形式存在。在一张表需要非随机，唯一标实符的场景下，Sequence 非常有用。</description></item><item><title>PostgreSQL - 数组(Array)</title><link>https://n3xtchen.github.io/n3xtchen/2015/04/05/postgresql---array/</link><pubDate>Sun, 05 Apr 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/04/05/postgresql---array/</guid><description>PostgreSQL 可以通过一种数据结构在独立字段中存储非原子的值。这个数据结构就是我们今天要谈的数组（Array），它本身不是一种数据类型，而是任何数据类型的一种拓展。</description></item><item><title>PostgreSQL - 继承（inheritance）</title><link>https://n3xtchen.github.io/n3xtchen/2015/04/04/postgresql---inheritance/</link><pubDate>Sat, 04 Apr 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/04/04/postgresql---inheritance/</guid><description>PostgreSQL 支持高级的 objdect-relational 机制，继承。继承允许一张表继承一张（或多张）表的列属性，来建立 parent-child 关系。子表可以继承父表的字段以及约束，同时可以拥有自己的字段。</description></item><item><title>Python 命令行应用 - 创建项目结构</title><link>https://n3xtchen.github.io/n3xtchen/2015/02/27/python---create-project-struct-of--command-line-applications/</link><pubDate>Fri, 27 Feb 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/02/27/python---create-project-struct-of--command-line-applications/</guid><description>我喜欢使用 Python 创建命令行应用，它写起来比 Bash 脚本更有逻辑直观。</description></item><item><title>使用 composer 管理 wordpress 应用包依赖</title><link>https://n3xtchen.github.io/n3xtchen/2015/02/15/wordpress-n-composer/</link><pubDate>Sun, 15 Feb 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/02/15/wordpress-n-composer/</guid><description>这篇文章，我们将使用 Composer 来管理 Wordpress Core，插件以及主题。</description></item><item><title>Pyramid - 一个文件实现 Todo 应用</title><link>https://n3xtchen.github.io/n3xtchen/2015/01/11/pyramid---todo-simple/</link><pubDate>Sun, 11 Jan 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/01/11/pyramid---todo-simple/</guid><description>此教程为你展示 Pyramid 开发 Web 应用的基本步骤。文章很短，使用尽可能少的代码实现一个待办事务（todo）应用。为了简洁，这里采用 Pyramid 的单文件应用模式来开发。</description></item><item><title>Ruby - Why rbenv?</title><link>https://n3xtchen.github.io/n3xtchen/2015/01/06/ruby---why-rbenv/</link><pubDate>Tue, 06 Jan 2015 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2015/01/06/ruby---why-rbenv/</guid><description>译自 https://github.</description></item><item><title>pyramid 快速入门 - (2)使用 Package 开发</title><link>https://n3xtchen.github.io/n3xtchen/2014/12/21/pyramid---quick-tutorial-2/</link><pubDate>Sun, 21 Dec 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/12/21/pyramid---quick-tutorial-2/</guid><description>02.</description></item><item><title>Pyramid 快速入门 - (1)单文件应用</title><link>https://n3xtchen.github.io/n3xtchen/2014/12/19/pyramid---quick-tutorial/</link><pubDate>Fri, 19 Dec 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/12/19/pyramid---quick-tutorial/</guid><description>前奏：从脚手架快速开始你的项目 # 原文见： quick_tutorial - scaffolds</description></item><item><title>Data Science at the Commandline - 如何创建可复用命令行工具（Commandline Tools）</title><link>https://n3xtchen.github.io/n3xtchen/2014/11/30/data-science-at-the-command---create-reusable-cmd-line-tools/</link><pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/11/30/data-science-at-the-command---create-reusable-cmd-line-tools/</guid><description>在前一篇 如何使用命令行进行数据分析 中，我们使用几个命令来进行一个简单的数据探索，向大家揭示了 命令行 毫不逊色于专业的数据分析工具；我们可以通过管道（Pipelines）将不同的命令串联在一块（我们称之为 one-liners）进行一些复杂的数据处理，清理，探索以及建模的任务（Bash 天生就是一种胶水语言）。</description></item><item><title>Oracle - 如何让你的 oradiag_&lt;username> 永久消失</title><link>https://n3xtchen.github.io/n3xtchen/2014/11/01/oracle---remove-oradiag_username/</link><pubDate>Sat, 01 Nov 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/11/01/oracle---remove-oradiag_username/</guid><description>如果你在你的 PC 机上安装了 Oracle 数据库，不久你就会发现 /home/username 目录下会产生一个 oradiag_&amp;lt;username&amp;gt;。你删除了之后，还是会不断的产生！没办法，本人有洁癖，于是在 StackOverflow 上找到了 解决方法，这里做个笔记。</description></item><item><title>Data Science at the Commandline - 如何使用命令行进行数据分析</title><link>https://n3xtchen.github.io/n3xtchen/2014/10/30/data-science-at-the-command---a-real-world-use-case/</link><pubDate>Thu, 30 Oct 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/10/30/data-science-at-the-command---a-real-world-use-case/</guid><description>《Data Science at the Commandline》中使用了命令行进行数据分析。我利用书中的例子给大家演示下如何使用 Commandline 进行数据分析的。不过，首先你需要有一台 Unix/Linux 机子，如果你使用的 Windows，那请安装 Linux 虚拟机。由于本文使用的数据需要在墙外（你懂得），这里同样也提供他的使用的 样本数据 。那开始进入主题：</description></item><item><title>Python - 简单的交互式数据分析</title><link>https://n3xtchen.github.io/n3xtchen/2014/10/22/python---simple-interactive-data-analysis/</link><pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/10/22/python---simple-interactive-data-analysis/</guid><description>交互式 Python # Python 是一个编程语言，它允许你快速创建和简单地编码就能完成相当复杂的任务。使用交互式 Python 解释器，试试输入一些命令来弄清楚它们工作原理。如果你完成一些基本 Python 教程，这里第一步对于你来说非常简单，只需要在命令行输入 python。</description></item><item><title>Ruby - 重构 Rack</title><link>https://n3xtchen.github.io/n3xtchen/2014/10/22/ruby---rebuild-rack/</link><pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/10/22/ruby---rebuild-rack/</guid><description>前言 # Rack，Ruby 的 GEM，是所有 Ruby 网页编程相关项目中公认最流行的底层框架了。你的框架可以不断的改变，但是不管你怎么换，你仍然需要使用 Rack。Rack 之所以如此流行和经久不衰来源是它的灵活特性。作为服务器和 Web 应用之间的中间人角色，Rack 只要求你遵循极少的标准，就能得到大量的中间件（Middlewares）支持。在 Ruby 的世界了， 它在解构标准方面拥有最大的成就。</description></item><item><title>Ruby - 解读 Almost Sinatra</title><link>https://n3xtchen.github.io/n3xtchen/2014/10/19/ruby---decoding-almost-sinatra/</link><pubDate>Sun, 19 Oct 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/10/19/ruby---decoding-almost-sinatra/</guid><description>Science!</description></item><item><title>PHP - 选择 Yii2 框架的7大原因</title><link>https://n3xtchen.github.io/n3xtchen/2014/10/17/php-7-reasons-to-choose-the-yii-2-framework/</link><pubDate>Fri, 17 Oct 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/10/17/php-7-reasons-to-choose-the-yii-2-framework/</guid><description>译自 http://www.</description></item><item><title>Ruby - 通过 Rail 来学习 SQL</title><link>https://n3xtchen.github.io/n3xtchen/2014/10/16/ruby---understanding-sql-through-rails/</link><pubDate>Thu, 16 Oct 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/10/16/ruby---understanding-sql-through-rails/</guid><description>译自 http://www.</description></item><item><title>Mac 骇客指南 - 自动化配置</title><link>https://n3xtchen.github.io/n3xtchen/2014/10/05/hack-mac---automatic-setting/</link><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/10/05/hack-mac---automatic-setting/</guid><description>译自 Hacker&amp;rsquo;s Guide to Setting up Your Mac</description></item><item><title>如何探索 Python？</title><link>https://n3xtchen.github.io/n3xtchen/2014/08/26/python-internal/</link><pubDate>Tue, 26 Aug 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/08/26/python-internal/</guid><description>当我们学习很多东西的时候，大家都很想了解它的底层具体发生的事情。比如，“真的“ 和 ”为什么” 这些词经常会存在对话中 —— “当我运行一个列表，实际发生了什么？”，“为什么函数调用需要考虑成本？”。如果看完下面的部分，你就知道我有多喜欢挖掘 Python 的底层，并且我永远喜欢和别人分享这些。</description></item><item><title>Jawbone UP24 - 3 个月使用体验</title><link>https://n3xtchen.github.io/n3xtchen/2014/08/25/jawbone-up24----experience/</link><pubDate>Mon, 25 Aug 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/08/25/jawbone-up24----experience/</guid><description>今年 5 月份入手 UP24，我的生日礼物哦，羡慕嫉妒恨去吧！使用了 3 个多月，这里对 UP24 的一些心得体会进行了一下总结。</description></item><item><title>Javascript MVC 框架大 PK - Backbone, AngularJS 和 Ember.js</title><link>https://n3xtchen.github.io/n3xtchen/2014/08/23/javascript---backbone-vs-angularjs-vs-emberjs/</link><pubDate>Sat, 23 Aug 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/08/23/javascript---backbone-vs-angularjs-vs-emberjs/</guid><description>1.</description></item><item><title>Python - Toolz - 流式分析（Streaming Analytics）工具</title><link>https://n3xtchen.github.io/n3xtchen/2014/08/21/python---toolz/</link><pubDate>Thu, 21 Aug 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/08/21/python---toolz/</guid><description>Toolz 可以用于编写分析大型数据流脚本，它支持通用的分析模式，如通过纯函数来对数据进行筛选（Selection），分组（Grouping），化简（Reduction）以及连表（Joining）。这些函数通常可以模拟类似其他数据分析平台（如 SQL 和 Panda）的类似操作行为。</description></item><item><title>使用 python - 实现 Map，Filter 以及 Reduce</title><link>https://n3xtchen.github.io/n3xtchen/2014/08/12/python---mapfilterreduce/</link><pubDate>Tue, 12 Aug 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/08/12/python---mapfilterreduce/</guid><description>心血来潮，当我在构思不定参数文档的时候，想到了用 Map 作为例子，萌生我实现 MapReduce 机制的想法!</description></item><item><title>Python 优雅的使用参数 - 可变参数（*args &amp; **kwargs)</title><link>https://n3xtchen.github.io/n3xtchen/2014/08/08/python---args-and-kwargs/</link><pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/08/08/python---args-and-kwargs/</guid><description>写在前面的话 # 传递参数的行为对于现在编程语言来说，再寻常不过的概念</description></item><item><title>函数式编程 &amp;&amp; Python - 第一部分</title><link>https://n3xtchen.github.io/n3xtchen/2014/08/04/python---functional-programming/</link><pubDate>Mon, 04 Aug 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/08/04/python---functional-programming/</guid><description>关于函数式 # Imperative Programming 指令式编程（C/C++，Java）</description></item><item><title>Python 测试驱动开发 - TDD初阶</title><link>https://n3xtchen.github.io/n3xtchen/2014/07/25/python-tdd---doctest-unittest2-coverage/</link><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/07/25/python-tdd---doctest-unittest2-coverage/</guid><description>老是把 TDD 挂在嘴边，周边的人也不为之所动，终于下决心整理下文档，也顺便重温下学过的知识。</description></item><item><title>Python - PyMySQL 初探</title><link>https://n3xtchen.github.io/n3xtchen/2014/07/23/python-pymysql-basic/</link><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/07/23/python-pymysql-basic/</guid><description>PyMySQL 是由纯 Python 实现的 MySQL 客户端库；他的目标是为了作为 MySQLdb 的替代品，可以在 CPython，PyPy，IronPython 和 Jython 上运行。</description></item><item><title>做一个快乐的 PHP Composer</title><link>https://n3xtchen.github.io/n3xtchen/2014/07/04/php---happy-composer/</link><pubDate>Fri, 04 Jul 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/07/04/php---happy-composer/</guid><description>在 Web 的发展史上， PHP，Python 和 Ruby 几乎是同时出现的，PHP 以其简单的语法，较低的入门门槛，得到了广泛的传播，也是各大与排行榜单前十的常客。与 PHP 发展迅速所不相对称的是，在包管理方面发展非常缓慢，不象 node 的 npm 和 ruby 的 bundler，幸亏有了 composer 的出现，很大程度上改变这样的局势，虽然发展相对还是不够完善，但是它的存在，为 PHP 的持续流行提供了强有力的推动力。有了 Composer，你可以：</description></item><item><title>R Statistics- 入门</title><link>https://n3xtchen.github.io/n3xtchen/2014/06/08/r-stats---intro/</link><pubDate>Sun, 08 Jun 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/06/08/r-stats---intro/</guid><description>R语言，一种自由软件编程语言与操作环境，主要用于统计分析、绘图、数据挖掘。R本来是由来自新西兰奥克兰大学的 Ross Ihaka 和 Robert Gentleman 开发（也因此称为R），现在由“R开发核心团队”负责开发。R是基于S语言的一个GNU计划项目，所以也可以当作S语言的一种实现，通常用S语言编写的代码都可以不作修改的在R环境下运行。R的语法是来自Scheme。</description></item><item><title>Data Pig - 手动安装（Local 模式）</title><link>https://n3xtchen.github.io/n3xtchen/2014/02/27/hadoop---data-pig---installation/</link><pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/02/27/hadoop---data-pig---installation/</guid><description>安装环境： # 软件列表： # Java-1.</description></item><item><title>Data Pig - Pig Latin 基础</title><link>https://n3xtchen.github.io/n3xtchen/2014/02/18/hadoop-data-pig-programming/</link><pubDate>Tue, 18 Feb 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/02/18/hadoop-data-pig-programming/</guid><description>通过三个章节的铺垫，现在开始深入了解 Pig 专属语言的 Pig Latin； 再次强调下， Pig Latin 是一门数据流语言（dataflow language）。</description></item><item><title>Hadoop 生态系统 - HCatalog</title><link>https://n3xtchen.github.io/n3xtchen/2014/02/17/hadoop-ecosystem---hcatalog/</link><pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/02/17/hadoop-ecosystem---hcatalog/</guid><description>Apache HCatalog 是基于 Hadoop 之上的数据表和存储管理服务，让用户可以使用不同 的工具来（例如，Pig，MR 和 Hive）读写网格的数据。HCatalog 是以 HDFS 的数据关 系视图的形式来呈现给用户的，确保用户不需要关心数据的存储形式和存储方式。 HCatalog 可以以RCFile，文本文件或者制表符式的序列文件。它也提供 Rest 接口让 外部系统访问这些表的元数据。</description></item><item><title>Using Hadoop - 创建简单的 Oozie 工作流</title><link>https://n3xtchen.github.io/n3xtchen/2014/02/16/using-hadoop---oozie/</link><pubDate>Sun, 16 Feb 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/02/16/using-hadoop---oozie/</guid><description>来源： Oracle - Build Simple Workflows in Oozie</description></item><item><title>Hadoop 生态系统 - Ambari</title><link>https://n3xtchen.github.io/n3xtchen/2014/02/14/hadoop-ecosystem---ambari/</link><pubDate>Fri, 14 Feb 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/02/14/hadoop-ecosystem---ambari/</guid><description>Apache Ambari 提供了 Hadoop 集群的配置，管理和监控，100%的开源框架；它包括操作 工具的集合，以及强大的 API 接口来隐藏 Hadoop 的复杂度，简化集群操作。</description></item><item><title>Hadoop 生态系统 - falcon</title><link>https://n3xtchen.github.io/n3xtchen/2014/02/14/hadoop-ecosystem---falcon/</link><pubDate>Fri, 14 Feb 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/02/14/hadoop-ecosystem---falcon/</guid><description>Apache Falcon 是 Hadoop 的数据管理框架和管道处理框架。它能自动采集（ingest）， 管道（pipelines），灾难恢复和数据保留用例。用户可以依赖 Falcon 来取代复杂的 数据和管道处理的硬编码，它可以对这些函数复用最大，以及保证 Hadoop 的跨应用 之间的数据一致性。</description></item><item><title>Hadoop 生态系统 - Oozie</title><link>https://n3xtchen.github.io/n3xtchen/2014/02/14/hadoop-ecosystem---oozie/</link><pubDate>Fri, 14 Feb 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/02/14/hadoop-ecosystem---oozie/</guid><description>Apache Oozie 是一个用来调度 Hadoop 工作的 Java 网页应用。Ozzie 可以将多个工作 组装成一个工作逻辑单位。它被整合到 Hadoop 栈中，可以用来创建 MapReduce，Pig， Hive 和 Apache Sqoop 的工作。它还可以用来调度其他系统的工作，例如 Java 程序以 及 Shell 脚本。</description></item><item><title>Hadoop 生态系统 - ZooKeeper</title><link>https://n3xtchen.github.io/n3xtchen/2014/02/14/hadoop-ecosystem---zookeeper/</link><pubDate>Fri, 14 Feb 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/02/14/hadoop-ecosystem---zookeeper/</guid><description>Apache ZooKeeper 为 Hadoop 集群提供操作服务。它提供了一个分布配置服务，一个同步 服务和一个命名注册表。分布式程序是使用 ZooKeeper 存储和调节重要配置信息的更新。</description></item><item><title>Hadoop 生态系统 - Knox Gateway</title><link>https://n3xtchen.github.io/n3xtchen/2014/02/13/hadoop-ecosystem---knox-gateway/</link><pubDate>Thu, 13 Feb 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/02/13/hadoop-ecosystem---knox-gateway/</guid><description>Know Gateway（简称 knox）是为 Hadoop 集群提供单点验证和访问。这个项目的目的是 为访问集群数据数据和执行工作（jobs）的用户，和控制和管理集群的运营商简化了 Hadoop 安全。Knox 作为服务运行，并为整个 Hadoop 集群服务。</description></item><item><title>Javascript Yeoman - 快速入门</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/26/javascript-yeoman-starter/</link><pubDate>Sun, 26 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/26/javascript-yeoman-starter/</guid><description>Yeoman 是什么？ # 这个问题问的很好；它不是东西，下面这位就是 Yeoman;</description></item><item><title>Javascript Grunt - 快速入门</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/22/javascript-grunt-starter/</link><pubDate>Wed, 22 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/22/javascript-grunt-starter/</guid><description>如果你正在进行一个 JS 项目，你可能会有一堆的日常工作要做。那有哪些需要做呢？</description></item><item><title>Javascript Bower - 发布自己的 bower 库</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/17/javascript-bower-register/</link><pubDate>Fri, 17 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/17/javascript-bower-register/</guid><description>让我们开始建立一个属于自己的超级简单的 bower 自定义库。它将会是一个无意义的 包，但是它将设计创建的每一个步骤。</description></item><item><title>Javascript Bower - 快速入门</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/16/javascript-bower-starter/</link><pubDate>Thu, 16 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/16/javascript-bower-starter/</guid><description>Bower， browser package manager（浏览器包管理器）, 不仅仅象 JAM 那样的 JS 包管理器；也不仅仅象 RequireJS 那样的模块载入器；最大的区别就是它不仅仅是 JS 包管理器，还可以管理 HTML，CSS 以及图片。</description></item><item><title>PHP PHP-CS_Fixer - 使用 PSR 格式化你的代码</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/09/php-cs_fixer/</link><pubDate>Thu, 09 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/09/php-cs_fixer/</guid><description>如果你已经使用了 PHP_CodeSniffer 来检查你的代码规范问题，通过手动去修复他们可能 会是个噩梦，尤其是在大项目中;怎么办</description></item><item><title>PHP CodeSniffer - 使用 PSR 规范你的PHP代码</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/08/php-code_sniffer/</link><pubDate>Wed, 08 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/08/php-code_sniffer/</guid><description>风格一致性使你的代码更加专业；相同项目的风格不一致（更坏的，是在同一个文件多个 编码风格）不仅看起来很邋遢，更纵容了将来的不严谨风格的产生；</description></item><item><title>Data Pig - 数据类型和数据结构</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/06/hadoop---data-pig---data-type/</link><pubDate>Mon, 06 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/06/hadoop---data-pig---data-type/</guid><description>Pig 数据类型主要分为两种类型：标量（Scalar）类型，它只包含单一的值；复合（Complex）类型，它可以包含多个值，可以是不同类型。</description></item><item><title>PHP FIG - PSR-0 自动载入标准（Autoloading Standard）</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/05/php-fig---psr-0/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/05/php-fig---psr-0/</guid><description>译自 http://www.</description></item><item><title>PHP FIG - PSR-1 基本代码规范（Basic Coding Standard）</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/05/php-fig---psr-1/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/05/php-fig---psr-1/</guid><description>译自 http://www.</description></item><item><title>PHP FIG - PSR-2 编码风格指南（Coding Style Guide）</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/05/php-fig---psr-2/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/05/php-fig---psr-2/</guid><description>译自 http://www.</description></item><item><title>PHP Fig - PSR-3 日志接口（Logger Interface）</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/05/php-fig---psr-3/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/05/php-fig---psr-3/</guid><description>译自 http://www.</description></item><item><title>PHP FIG - PSR-4 自动载入（Autoloader）</title><link>https://n3xtchen.github.io/n3xtchen/2014/01/05/php-fig---psr-4/</link><pubDate>Sun, 05 Jan 2014 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2014/01/05/php-fig---psr-4/</guid><description>译自 http://www.</description></item><item><title>Data Pig - Pig 简介</title><link>https://n3xtchen.github.io/n3xtchen/2013/12/31/hadoop---data-pig/</link><pubDate>Tue, 31 Dec 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/12/31/hadoop---data-pig/</guid><description>什么是 Pig?</description></item><item><title>Python Django - simple guide</title><link>https://n3xtchen.github.io/n3xtchen/2013/11/25/python-django---simple/</link><pubDate>Mon, 25 Nov 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/11/25/python-django---simple/</guid><description>一.</description></item><item><title>Coding in Ruby - Starter</title><link>https://n3xtchen.github.io/n3xtchen/2013/11/07/ruby-learning/</link><pubDate>Thu, 07 Nov 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/11/07/ruby-learning/</guid><description>Ruby # Ruby 是一种拥有复杂的极具表达力语法的动态语言，还附带丰富强大接口的核心类库。 Ruby 启发于 Lisp，Smalltalk 和 Perl，并且使用便于 C 和 JAVA 程序学习的语法。 Ruby 是纯面向对象的语言，但也适用于过程和函数式编程。它涵盖强大的元编程，也 可以用于创建适用特殊领域的语言(又称 DSL)。</description></item><item><title>Vim Tip - 树形目录(NERTree)</title><link>https://n3xtchen.github.io/n3xtchen/2013/10/27/vim-nertree/</link><pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/10/27/vim-nertree/</guid><description>常见命令 # o 打开文件(夹) O 递归打开当前节点的所有子节点 i 水平分割屏打开文件 s 垂直分割屏打开文件 x 关闭文件 P 跳到根节点 p 跳到当前父节点 K 跳到当前节点开始位置 J 跳到当前节点结束位置 C 将选中的目录作为根节点 u 将当前根节点的父目录作为根节点 r 刷新当前目录 R 算新当前根节点 I 切换隐藏文件的显示 F 切换文件的现实 q 关闭 A 最大化/最小化目录窗口 ?</description></item><item><title>Vim Tip - 折叠(Folding)</title><link>https://n3xtchen.github.io/n3xtchen/2013/10/26/vim---fold/</link><pubDate>Sat, 26 Oct 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/10/26/vim---fold/</guid><description> 基本命令 # zo 打开当前光标下的折叠 zO 打开当前光标下的所有折叠 zc 关闭当前光标下的折叠 zC 关闭当前光标下的所有折叠 za zo/zc zA zO/zC zm 关闭一级折叠层(foldlevel) zM 关闭所有的折叠层 zr 打开一级折叠层 zR 打开所有折叠层 zj 移到当前光标的下一个折叠 zk 移到当前光标的上一个折叠 [z 移到当前打开折叠的起始位置 ]z 移到当前打开折叠的结束位置 &amp;quot; 折叠方式为 manual 或 marker时，下面命令可用 zf{motion}/{Visual}zf 创建一个折叠 {n}ZF 创建当前光标下的n行的折叠 :{range}fo[ld] 创建范围行内的 zd 删除当前坐标折叠 zD 删除当前坐标中的所有折叠 zE 删除全部的折叠 折叠规则 # &amp;quot; 手动折叠,使用 zf/zF/zd/zD/zE 自定义折叠规则 :set foldmethod=manual &amp;quot; 语法折叠，根据相应编程语言的语法自动折叠 :set foldmethod=syntax &amp;quot; 缩进折叠,根据缩进层次(shiftwidth)自动锁进 :set foldmethod=indent &amp;quot; 特定标记折叠，所有文本将按照特定标记（默认为\{\{\{和\}\}\}）自动折叠。 :set foldmethod=marker</description></item><item><title>Linux - 软件列表（自用）</title><link>https://n3xtchen.github.io/n3xtchen/2013/10/14/linux---n3xt-soft-package/</link><pubDate>Mon, 14 Oct 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/10/14/linux---n3xt-soft-package/</guid><description>系统 # Ubuntu 12.</description></item><item><title>Linux - 调整 /home 分区</title><link>https://n3xtchen.github.io/n3xtchen/2013/10/12/linux-change-home-partion/</link><pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/10/12/linux-change-home-partion/</guid><description>摘自 http://www.</description></item><item><title>Ubuntu 12.04 - 安装 Gnome 卸载 Unity</title><link>https://n3xtchen.github.io/n3xtchen/2013/10/12/ubuntu-install-gnome-remove-unity/</link><pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/10/12/ubuntu-install-gnome-remove-unity/</guid><description>摘自 http://blog.</description></item><item><title>Python Mongo 模块 - Pymongo</title><link>https://n3xtchen.github.io/n3xtchen/2013/10/03/python-module-pymongo/</link><pubDate>Thu, 03 Oct 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/10/03/python-module-pymongo/</guid><description>连接服务器 # &amp;gt;&amp;gt;&amp;gt; from pymongo import MongoClient &amp;gt;&amp;gt;&amp;gt; client = MongoClient('127.</description></item><item><title>Python Trick</title><link>https://n3xtchen.github.io/n3xtchen/2013/09/28/python-trick-re/</link><pubDate>Sat, 28 Sep 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/09/28/python-trick-re/</guid><description>空白处理 # 去除字符中的所有空格 # _string = ' 88 11 10 ' print &amp;quot;&amp;quot;.</description></item><item><title>PHP 苗条(Slim)的框架 - 第一部分</title><link>https://n3xtchen.github.io/n3xtchen/2013/09/27/php-slim-shady/</link><pubDate>Fri, 27 Sep 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/09/27/php-slim-shady/</guid><description>我叫 Slim # Slim 是一个 PHP 微框架，它帮助我们快速的编写简单而且强大的网络应用和借口。</description></item><item><title>Python 常用模块 - 通用配置configParser</title><link>https://n3xtchen.github.io/n3xtchen/2013/09/24/python-module-configparser/</link><pubDate>Tue, 24 Sep 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/09/24/python-module-configparser/</guid><description>生成配置文件 # import ConfigParser config = ConfigParser.</description></item><item><title>WEB 微框架</title><link>https://n3xtchen.github.io/n3xtchen/2013/09/23/microframework/</link><pubDate>Mon, 23 Sep 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/09/23/microframework/</guid><description>什么是微框架(MicroFrameWork) # 某种编程语言语言以最小代价实现某一领域应用的特定领域语言 (DSL)。</description></item><item><title>Hello, G Tech</title><link>https://n3xtchen.github.io/n3xtchen/2013/09/20/hello-g-tech/</link><pubDate>Fri, 20 Sep 2013 00:00:00 +0000</pubDate><guid>https://n3xtchen.github.io/n3xtchen/2013/09/20/hello-g-tech/</guid><description/></item></channel></rss>